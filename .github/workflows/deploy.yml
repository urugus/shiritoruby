name: Deploy to AWS

on:
  push:
    branches: [ main ]

permissions:
  id-token: write  # OIDCトークンの取得に必要
  contents: read   # リポジトリのコードを読み取るために必要
  actions: read    # GitHub Actionsの実行コンテキストへのアクセスに必要
  packages: write  # パッケージの公開に必要

jobs:
  deploy:
    name: Deploy to AWS
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # OIDCトークンは permissions: id-token: write で自動的に利用可能になるため、
      # 明示的なactions/id-tokenステップは不要です

      - name: Debug OIDC Context and Secrets
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          echo "GitHub Actions OIDC is enabled via permissions: id-token: write"
          echo "Repository: ${{ github.repository }}"
          echo "Ref: ${{ github.ref }}"
          echo "Actor: ${{ github.actor }}"
          echo "Event name: ${{ github.event_name }}"
          echo "Run ID: ${{ github.run_id }}"
          echo "Run number: ${{ github.run_number }}"

          # AWS_ACCOUNT_IDの値を確認（セキュリティのため一部を隠す）
          if [ -n "$AWS_ACCOUNT_ID" ]; then
            echo "AWS_ACCOUNT_ID: ${#AWS_ACCOUNT_ID} characters, ends with ...${AWS_ACCOUNT_ID: -4}"
          else
            echo "AWS_ACCOUNT_ID is not set"
          fi
          echo "AWS_REGION: $AWS_REGION"

          # OIDCトークンのsubクレームを確認するためのデバッグ情報
          echo "Expected sub claim format: repo:urugus/shiritoruby:ref:refs/heads/main"
          echo "IAM Role Trust Policy condition: repo:urugus/shiritoruby:ref:refs/heads/main, repo:urugus/shiritoruby:pull_request"

      - name: Configure AWS credentials
        id: aws-credentials
        uses: aws-actions/configure-aws-credentials@v2
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-role
          aws-region: ${{ secrets.AWS_REGION }}
          role-duration-seconds: 900  # 15分（デフォルト）
          audience: sts.amazonaws.com
          mask-aws-account-id: true

      - name: Debug AWS Credentials
        run: |
          # AWS認証情報が正常に設定されたことを確認
          echo "AWS credentials configured: ${{ steps.aws-credentials.outputs.aws-account-id || 'Failed to get account ID' }}"

          # IAMロールの情報を表示
          if [ -n "$AWS_ACCESS_KEY_ID" ]; then
            echo "AWS credentials are available"
            echo "Assumed role: $(aws sts get-caller-identity --query 'Arn' --output text || echo 'Failed to get role ARN')"
          else
            echo "AWS credentials are NOT available"
          fi

          # エラーが発生した場合の詳細情報
          echo "AWS_ROLE_ARN: ${{ env.AWS_ROLE_ARN || 'Not set' }}"
          echo "AWS_WEB_IDENTITY_TOKEN_FILE: ${AWS_WEB_IDENTITY_TOKEN_FILE:-'Not set'}"


      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: shiritoruby
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # ビルドとプッシュ
          docker buildx build \
            --platform linux/amd64 \
            --tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            --tag $ECR_REGISTRY/$ECR_REPOSITORY:latest \
            --push \
            .
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Download task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition shiritoruby \
            --query taskDefinition > task-definition.json

      - name: Clean task definition
        run: |
          # 不要なプロパティを削除
          jq 'del(.taskDefinitionArn, .status, .revision, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)' task-definition.json > cleaned-task-definition.json
          mv cleaned-task-definition.json task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1.7.1
        with:
          task-definition: task-definition.json
          container-name: shiritoruby
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2.3.2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: shiritoruby-service
          cluster: shiritoruby-cluster
          wait-for-service-stability: true

      - name: Run database migrations
        run: |
          aws ecs run-task \
            --cluster shiritoruby-cluster \
            --task-definition shiritoruby \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[ $(aws ecs describe-services --cluster shiritoruby-cluster --services shiritoruby-service --query 'services[0].networkConfiguration.awsvpcConfiguration.subnets[0]' --output text) ],securityGroups=[ $(aws ecs describe-services --cluster shiritoruby-cluster --services shiritoruby-service --query 'services[0].networkConfiguration.awsvpcConfiguration.securityGroups[0]' --output text) ],assignPublicIp=ENABLED}" \
            --overrides '{"containerOverrides": [ {"name": "shiritoruby", "command": [ "./bin/rails", "db:migrate" ]} ]}'

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "~> 1.0"

      - name: Terraform Init
        run: |
          cd terraform
          terraform init

      - name: Terraform Apply
        run: |
          cd terraform
          terraform apply -auto-approve \
            -var="db_username=${{ secrets.TF_VAR_DB_USERNAME }}" \
            -var="db_password=${{ secrets.TF_VAR_DB_PASSWORD }}" \
            -var="rails_master_key=${{ secrets.TF_VAR_RAILS_MASTER_KEY }}" \
            -var="domain_name=${{ vars.TF_VAR_DOMAIN_NAME || '' }}" \
            -var="create_acm_certificate=${{ secrets.TF_VAR_CREATE_ACM_CERTIFICATE || vars.TF_VAR_CREATE_ACM_CERTIFICATE || 'true' }}" \
            -var="acm_certificate_arn=${{ secrets.TF_VAR_ACM_CERTIFICATE_ARN || vars.TF_VAR_ACM_CERTIFICATE_ARN || '' }}" \
            -var="existing_lb_dns_name=${{ secrets.TF_VAR_EXISTING_LB_DNS_NAME || vars.TF_VAR_EXISTING_LB_DNS_NAME || '' }}" \
            -var="existing_lb_zone_id=${{ secrets.TF_VAR_EXISTING_LB_ZONE_ID || vars.TF_VAR_EXISTING_LB_ZONE_ID || '' }}"