name: Deploy to AWS

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    name: Deploy to AWS
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: shiritoruby
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # ビルドとプッシュ
          docker buildx build \
            --platform linux/amd64 \
            --tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            --tag $ECR_REGISTRY/$ECR_REPOSITORY:latest \
            --push \
            .
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Download task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition shiritoruby \
            --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1.1.0
        with:
          task-definition: task-definition.json
          container-name: shiritoruby
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1.4.0
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: shiritoruby-service
          cluster: shiritoruby-cluster
          wait-for-service-stability: true

      - name: Run database migrations
        run: |
          aws ecs run-task \
            --cluster shiritoruby-cluster \
            --task-definition shiritoruby \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[ $(aws ecs describe-services --cluster shiritoruby-cluster --services shiritoruby-service --query 'services[0].networkConfiguration.awsvpcConfiguration.subnets[0]' --output text) ],securityGroups=[ $(aws ecs describe-services --cluster shiritoruby-cluster --services shiritoruby-service --query 'services[0].networkConfiguration.awsvpcConfiguration.securityGroups[0]' --output text) ],assignPublicIp=ENABLED}" \
            --overrides '{"containerOverrides": [ {"name": "shiritoruby", "command": [ "./bin/rails", "db:migrate" ]} ]}'